#!/usr/bin/python
# -*- coding: utf-8 -*-

import MySQLdb 
import sys
import smtplib


#incapsulates database procedures
#all db working processing here
class db:
    sql=""
    def __init__(self):
	self.sql="select "

    def select(self,what):
	self.sql+=str(what)+" "
	
    def fromm(self,table):
	self.sql+="from "+str(table)+" "

    def where(self,cond):
	self.sql+="where ("+str(cond)+");"
	
    def leftjoin(self,ljoin,on):
	self.sql+="left join " +str(ljoin)+" on "+str(on)+" "
	
    
    def dbconnect(self):
	res=0
	try:
		db = MySQLdb.connect(host="localhost", user="root", passwd="w@rE^tmn02", db="redmine", charset='utf8')
		cursor = db.cursor()
		res=(cursor,db)
	except MySQLdb.Error, e:
		print "Error "+str(e.args[0])+str(e.args[1])
		res=0		
	finally:		
		return res
	return res
#get only one value
    def get(self):
	res=[]
	(c,d)=self.dbconnect()
	#print self.sql
	c.execute(self.sql)
	#numrows=int(c.rowcount)
	#for i in xrange(numrows):
	#    res.append(c.fetchone()[0])
	res=c.fetchone()[0]
	d.close()
	return res
#strange db collector. In the end we\ve got list of lists
    def getall(self):
	res=[]
	(c,d)=self.dbconnect()
	c.execute(self.sql)
	res=c.fetchall()
	#numrows=int(c.rowcount)
	#for i in xrange(numrows):
	#    res.append(c.fetchone()[0])
	d.close()
	#print "res"
	#print res
	return res
	
	

####################################################################################
#Class incapsulate all work with an issue. Each instance has an issue id and valuable attributes for remind
#On initialize  we assign values to the variables
class reminder:
    id=0
    mails=''
    subject=''
    deadend=''
    performer=''
    
    def __init__(self,id):
	#self.mails=''
	#self.subject=''
	#self.deadend=''
	self.id=id
	self.getmails()
	self.getdeadend()
	self.getsubject()
	self.getperformername()
	
    def getperformername(self):
	rdb=db()
	pid=self.getperformerid()
	#print "pid="
	#print pid
	rdb.select('lastname,firstname')
	rdb.fromm('users')
	rdb.where('id='+str(pid))
	res=rdb.getall()
	res=res[0][0]+' '+res[0][1]
	#print "get perf name, res="
	#print res
	if res:
	    self.performer=res.encode("UTF-8")
	else:
	    self.performer="Исполнитель"
    
    def getsubject(self):
	#if id is set we set subject
	rdb=db()
	rdb.select('subject')
	rdb.fromm('issues')
	rdb.where('id='+str(self.id))
	res=rdb.get()
	print res
	if res:
	    self.subject=res.encode("UTF-8")
	    return res
	else:
	    return 0
	

    def getdeadend(self):
	#set deadend date
	rdb=db()
	rdb.select('value')
	rdb.fromm('custom_values')
	rdb.where('customized_id='+str(self.id))
	res=rdb.get()
	if res:
	    self.deadend=res
	    return res
	else:
	    return 0
	
    def getperformerid(self):
	rdb=db()
	rdb.select("assigned_to_id")
	rdb.fromm('issues')
	rdb.where('id='+str(self.id))
	res=str(rdb.get())
	#print "getperformerid, res="
	#print res
	return res
    
    def getauthor(self):
	import re
	rdb=db()
	rdb.select('mail')
	rdb.fromm('users')
	rdb.where('users.id =(select author_id from issues where issues.id='+str(self.id)+')')
	print rdb.sql
	res=rdb.get()
	pat=re.compile(res)
	if pat.search(self.mails):
	    print "no"
	else:
	    self.mails+=str(res)+','
    
    
#we get dictionary {id_issue - [list of users id who are watchers]}	
    def getwatchers(self):
        import re
        rdb=db()
	rdb.select("users.mail")
	rdb.fromm("users")
	rdb.leftjoin("watchers","users.id=watchers.user_id")
	rdb.where("watchers.watchable_type='Issue' and watchers.watchable_id="+str(self.id))
	print rdb.sql
	res=rdb.getall()
	if res:
	    for r in res:
		print r[0]
		pat=re.compile(r[0])
		if pat.search(self.mails):
		    print "no"
		else:
		    self.mails+=str(r[0])+','
	    return self.mails
	else:
	    return 0
	
    
#select mail from users where id in (select user_id from groups_users where group_id=id)
    def getgroupsmails(self):
	import re
	rdb=db()
	rdb.select('mail')
	rdb.fromm('users')
	rdb.where('id in (select user_id from groups_users where group_id=id)')
	res=rdb.getall()
	if res:
	    for r in res:
		pat=re.compile(r[0])
		if pat.search(self.mails):
		    print "no"
		else:
		    self.mails+=str(r[0])+','
	    return self.mails
	else:
	    return 0
	    
    def getmailbyid(self,userid):
	import re
	rdb=db()
	rdb.select("mail")
	rdb.fromm('users')
	rdb.where('id='+str(int(userid)))
	#print rdb.sql
	res=rdb.get()
	#print res
	if res:
	    pat=re.compile(res)
	    if pat.search(self.mails):
		print "no"
	    else:
	    	self.mails+=str(res)+','
	    return res
	else:
	    return 0

#main procedure for mails list forming. Here we grab all mails of all issue's participiants
    def getmails(self):
	#get author mail
	self.getauthor()
	self.getwatchers()
	#get performer
	#print "we are in getmails call getperformerid"
	tid=self.getperformerid()
	self.getperformername()
	#print "we are int getmails, call getmailsbyid"
	temp=self.getmailbyid(tid)
	#print "temp="
	#print temp
	if temp==0:
	    #print "performer is group, so we search group mails"
	    t=self.getgroupsmails()
	    #print "getgroupmails return="
	    #print t
	

	
	
#select issues.id, custom_values.customized_id, custom_values.value, custom_values.custom_field_id from issues left join custom_values on issues.id=custom_values.customized_id where (custom_values.custom_field_id=2 and DATEDIFF(custom_values.value,CURDATE())>0 and DATEDIFF(custom_values.value,CURDATE())<=3);
#return all issues wich should be closed soon or exceeded 
#mtype - if we want to notify users about their exceeded tasks
def getissuesid(days,mtype=0):
    rdb=db()
    id_issues=[]
    rdb.select("issues.id") #, custom_values.customized_id, custom_values.value, custom_values.custom_field_id")
    rdb.fromm("issues")
    rdb.leftjoin("custom_values","issues.id=custom_values.customized_id")
    rdb.where("DATEDIFF(custom_values.value,CURDATE())>="+str(mtype)+" and DATEDIFF(custom_values.value,CURDATE())<="+str(days)+" and custom_values.custom_field_id=2")
    #print rdb.sql
    res=[]
    id_issues=rdb.getall()
    for iss in id_issues:
	res.append(iss[0])
    print "getissuesid, var res:"
    print res
    return res





###########################################################################


##########################################################################
#Send Email as HTTP
#	

#reminders={id_issue:[mails of issue envolved units]}
def sendmail(r):	
	#print mails
	from email.MIMEText import MIMEText
	textsubtype="plain"
	#message = "Attention! One of your tasks soon should be closed. Please look at the issue: http://redmine.tmn.transneft.ru/redmine/issues/"+str(isid)
	#message = "Внимание! Задача"+reminders.subject+" скоро должна быть закрыта или уже просрочена. Время завершения задачи "+reminders.deadend+". Задача назначена"+reminders.performer+" Пожалуйста, посмотрите: http://redmine.tmn.transneft.ru/redmine/issues/"+str(isid)
	message = "Внимание! Задача \'"+str(r.subject)+"\' скоро должна быть закрыта или уже просрочена. Дата завершения задачи "+str(r.deadend)+ ".  Задача назначена - "+str(r.performer)+". Пожалуйста, посмотрите: http://redmine.tmn.transneft.ru/redmine/issues/"+str(r.id)
	#print "MESSAGE="
	#print message
	msg=MIMEText(message,textsubtype,'UTF-8')
	msg['To']=r.mails
	msg['Subject']="Напоминание о задаче "+str(r.subject)
	print msg.as_string()
	try:
	    smtpObj = smtplib.SMTP('10.81.1.12')
	    print msg
	    smtpObj.sendmail('redmine@tmn.transneft.ru', r.mails.split(","), msg.as_string())
	    print "Successfully sent email"+msg.as_string()
	except Exception, exc:
		print "Error: unable to send email due to "+str(exc)
	finally:
		smtpObj.quit()

#############################################################

   
def main():
    issues=getissuesid(3,0)
    for i in issues:
	r=reminder(str(i))
	r.mails=r.mails[:-1]
	sendmail(r)


main()
